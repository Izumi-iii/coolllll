计算机二级考试  java语言程序设计
第一章java概述
语言特点 
： 简单的  面向对象的  分布式的  强壮的 安全的 体系结构中立的  
可移植的 高性能的 多线程的  动态的

Java是严格区分大小写的

Java程序的注释
解释程序
调试程序，暂时屏蔽某些语句

编写java源文件应注意的事项
1 源文件的组成  应该使用文字编辑器，不能使用word ，java源文件的扩展名必须是
.java 。
2 应用程序的主类
一个java程序必须有一个类含有public static void main(String args[])方法，
称这个类是应用程序的主类



Java程序编写及运行过程
程序分两种
Java Application  ：是一个完整的应用程序1，可以独立地运行。运行在jvm上，必须要有main方法
Java Applet (小应用程序) ： 不是一个完整的应用程序，而是框架程序种的一个小模块，所以只能在浏览器环境下运行，可以没有main方法，必须由某个支持java的浏览器运行


第二章基本数据类型

语句
  方法调用语句  表达式语句  复合语句 控制语句 package语句和import语句
表达式语句：一个表达式加一个 ；   如：  x = 23 ；  。
复合语句：也被称为一个代码块
{
z = 3 ;
x = 4 ;
System.out.println(z + x);
}
控制语句： 包括条件分支语句，循环语句和跳转语句
Package语句和import语句与类，对象，包有关

两种数据类型
简单类型和引用类型


常量 
 	为一个标识符，用来记忆一个固定的数值，不可更改，用final声明，与变量相比不占用内存，常量名称用大写字母     格式   final 类型 常量名 = 值 ;
布尔常量  
只true和false两个值，书写时直接写单词，不能加引号
整型常量   
不含小数的整数值，书写采用十进制，十六进制，八进制形式
（八进制以0开头，十六进制以0X开头，0~9，a~f）
浮点型常量  
两种表示方法  *十进制数形式 必须有小数点 如.123  0.123  13.0
*科学计数法形式，如123e或123E-3  e或E的前后必须有数且之后必须为整数
字符常量  
一对单引号括起的单个字符 它可以时Unicode字符集（ASCLL是Unicode的一个子码，ASCLL中有128个字符，Unicode中有65536个）中的任意字符，如‘a’，‘Z’,对无法通过键盘录入的可以用转义符表示。
*想要表示‘  ： ‘\‘’
字符常量的另一种表示就是直接写出字符编码，如字母A的十六进制表示为‘\u0041’
变量
在程序中为一个标识符，在内存中是一块空间，它提供了一个临时存放信息和数据的地方，具有记忆数据的功能。变量是可以改变的，它可以存放不同类型的数据，通常用小写字母或单词作为变量名
声明格式： 类型  变量名【变量名】【=初值】；  （方括号中的为可有可无）
变量有一定的生命周期和作用域。变量的作用域是指访问变量的代码范围。按作用域来分，变量可以分为局部变量  类成员变量  方法参数  异常处理参数
在类中声明的变量称为类的成员变量，通常在类开始处声明，可在整个类中使用。在方法或语句块中声明的变量为局部变量
局部变量在声明时一定要初始化，即赋初始值，否则程序运行回出错
成员变量在声明时可不初始化，程序运行时，系统回自动进行初始化工作，即给成员变量赋值
各数据类型之间的转换
数据类型的自动转换   
Boolean类型不可转换为其他的数据类型。整型，字符型，浮点型在混合运算中的自动相互转换，应遵循一下原则： 占位数小的类型字段转化为占位数大的类型
小-->大
byte -- short -- (char) -- int -- long -- float -- double
多种类型的数据混合运算时，系统首先自动的将所有数据转换为占位数最大的那种数据类型，然后进行计算
数据类型的强制转换   
占位数大的数据类型转换为占位数小的数据类型时，要加上强制转换符，但是可能造成精度降低或溢出
涉及byte，short，char类型的运算  java中涉及这三种类型的运算操作首先会把这些值转换为int类型，然后对int类型值进行运算，最后得到int类型结果，so如果把两个byte类型值相加，得到一个int类型。


第三章运算符与表达式
Java的运算符代表着特定的运算指令
按照功能分类，有七种：算术运算符，关系运算符，逻辑运算符，位运算符，赋值运算符，条件运算符和其他运算符
按照连接操作数的多少来分：一元，二元，三元运算符

表达式是由常量，变量，对象，方法调用和运算符组成的式子。表达式必须符合一定的规范，才可被系统理解，编译和运行
根据运算符的不同，表达式也应当分为以下：算术表达式，关系表达式，逻辑表达式，位运算表达式，赋值表达式，条件表达式。
算术运算符和算术表达式
加减运算符
整数或浮点型数据，优先级为5级
乘，除，求余  * / %
整数或浮点型数据，优先级为4级
自增，自减运算符 ++  --
一元运算符，优先级为2级，运算符可以放在操作元之前也可以之后，必须为整数或浮点型（不能为常量或表达式）
++x，--x表示在使用使用x之前，先把x加减1
x++，x--表示在使用使用x之后，把x加减1
对于y = ++x ； y的结果是6
对于y = x++ ； y的结果是5
算术表达式
用算术运算符和操作元连接起来的符合java语法规则的式子
算术混合运算的精度
精度从高到低 ： byte short int long float double
Java将按运算符两边的操作元的最高精度保留为结果的精度，例如5/2为2，想要得到2.5需要写成5.0/2 。
char型数据和整型数据的运算结果精度是int型  例如 byte k = 18 ；那么 ‘H’ + k; 的结果是int型，因此下列写法是不正确的，char ch = ‘H’ + k ;
应该写为：char ch = (char)(‘H’ + k) ;

关系运算符和关系表达式
关系运算符用来比较两个值的关系，关系运算符的运算结果是boolean型数据，当运算对应的关系成立时，运算结果时true，，否则false

大小关系运算符  <  >  >=  <=
都为双目运算符，操作元是数值型的常量，变量或表达式，优先级为7级

等与不等关系   ==   ！=
双目运算符，级别8级
关系表达式
结果为数值型的变量或表达式可以通过关系运算符形成关系表达式，例如18>12，
（x+y+z）>30+x 等。
逻辑运算符与逻辑表达式
逻辑运算用来实现boolean型数据的逻辑  与  或  非 运算，运算结果boolean型
逻辑‘与’ &&  逻辑 ‘或’ ||
操作元为boolean型变量或求值结果是boolean型数据的表达式
&&  都为真才为真，否则假
||  都为假才为假，否则真
他们也被称为短路逻辑运算符，例如 op1 && op2 ，若op1为假，则不再判断op2，直接得出false的结果

逻辑  非 ！
单目运算符，写在操作元的左边，将操作元的结果颠倒
位运算符和位表达式
位运算都是对整型数据的二进制进行的
按位与  运算符   &
双目运算符，对两个整型数据a，b按位进行运算，运算结果为一个整型数据c。运算法则：如果a、b两个数据对应位都是1，则c的该位是1，否则是0.如果b的精度高于a，则结果c的精度和b相同
按位或  运算符  | 
双目运算符，和上一个差不多，但对应位都是0，c的该位为0，否则为1
按位非  运算符  ~
单目运算符，将一个数据每一位取反
按位异或  运算符 ^
双目运算符，a，b对应为相同，c对应位为0，否则为1
位运算符在操作逻辑型数据时，与逻辑运算符&& ，||， ！不同的是，位运算要计算完a，b之后再给出答案，即非短路
移位运算符
移位运算符用来对二进制进行移位操作，分为左移位操作和右移位操作。注意，二进制均为补码。
左移位运算符  <<
双目运算符，左移位运算符符左面的操作元被称作移位量，操作元必须是整型类型数据

右移位运算符 >>

逻辑右移运算符： >>>
操作数被右移后，高位都用0填充，无论操作数是正还是负
赋值运算符与赋值表达式
赋值运算符  =
双目运算符，左边的操作元必须是变量，优先级为15级
扩展赋值运算符

条件运算符
唯一的三目运算符   符号：   ？=   需要连接三个操作元
用法：op1？op2：op3   均为boolean型
当op1的值为true时，结果为op2的值，为false时结果为op3的值

第四章 流程控制
流程控制分为三种基本结构：顺序结构，分支结构，循环结构
顺序结构
指命令行顺序执行
分支结构
是一种选择结构，根据条件值的不同选择不同的执行流程，有单分支（if-else）和多分支（switch）。
循环结构
是指对一些重复执行的语句，用户指定条件或此书，由机器自动识别执行。
（while，for等）
多分枝语句switch
switch(表达式){
case 常量值1 : 语句组1 ;
[break;]
case 常量值2 : 语句组2 ;
……
case 常量值n : 语句组n ;
default : 语句组2 ;
}
语句中表达式的值必须时整型或者字符型，常量值也是
注意，通常每一个case中都应使用break语句提供一个出口，是跳出流程的开关，否则所有情况都会被执行，这种情况叫落空




循环结构   一个循环一般应包括四部分内容：
初始化部分 ： 用来设置循环的一些初始条件，计数器清零等等
循环体部分 ： 这是反复被执行的一段代码，可以是单语句，也可以是复合语句
迭代部分： ： 这是在当前循环结束，下一次循环开始时执行的语句，常用来使计数器加一或减一
终止部分 ： 通常使一个布尔表达式，每一次循环要对该表达式求值，以验证是否满足循环终止条件

while循环
While（表达式）{
若干语句
}


do-while 循环
do{
语句组
}while（表达式）
程序先执行do下面的循环体，然后计算while后面表达式的值，若结果为true，则重复执行循环体，否则跳出循环


for 循环
对于循环次数固定的情况
跳转语句
Java支持三种跳转关键字：break，continue，return
带标号的break语句:
标号是标记程序位置的标识符，带标号的break语句能直接跳出标号所示的层次
标识符：
  ……
break 标识符；

continue语句
只能在循环结构中使用，它能跳过循环体中尚未执行的语句，直接开始下一轮循环
Jave也支持带标号的continue语句，它通常用在嵌套结构的内循环中，你可以用标号标出你想跳到哪一层语句继续重复执行程序
标识符：
……
continue 标识符 ；
retun语句：
return语句用于方法的返回上，当程序执行到return语句时，终止当前方法的执行，返回到调用这个方法的语句。常用于一个方法体的最后一行，有带参与不带参两种形式。
递归
递归的基本思想是“自己调用自己”。一个使用递归技术的方法将直接或间接地调用自身地方法。利用递归，可以用简单地程序来解决某些复杂地计算问题。
一个递归问题可分解为：“递归”和“递推”两个阶段。
1 程序控制权反复进入同一个方法，形成递归调用；
2 当满足某一条件后结束递归；
3 程序控制权逐级从方法中返回，形成递推回代；

第四章面向对象编程
对象 ： 的对象是显示世界事物的抽象模型。在开发软件的信息世界中，对象定义为相关数据和方法的集合。从现实世界事物中抽象出来的对象，一般通过变量描述起状态，通过方法实现其行为。变量是一种有名称的数据实体，而方法则是和对象相关的函数或过程。
类就是对象的软件图纸，模板或原型。它定义了同类对象共有的变量和方法。
类和对象二者不太容易区分，一方面，由于软件对象都是现实对象或抽象概念的电子模型，另一方面，经常不加区分地将对象和类统称为“对象”。
Java编程就是设计类，可以采用自定义的方法继承方法设计一个类，然后使用他的实例对象完成具体功能。


封装
封装就是面向对象方法的核心思想之一。它有两个含义：
一是指把对象的属性和行为看成一个密不可分的整体，将这两者“封装”在一个不可分割的独立单位（即对象）中
另一层含义指“信息隐蔽”，把不需要让外界知道的信息隐藏起来，只允许使用对象的功能，而尽可能隐藏对象的功能实现细节

继承
子类可以继承父类的属性（数据）和功能（操作）。是提高软件开发效率的重要手段
多态----程序中允许出现方法重名的现象。Java中具有操作名称的多态以及和继承有关的多态。
类的声明
类声明定义了类的名字以及其他属性，说明该类是什么样的类。一般来说，根据声明的类的需要，类声明可以包含 声明类的修饰符 说明该类的父类 说明该类所实现的接口


类修饰符
public | abstract | final
Public  该关键字声明的类可以在其他的任何类中使用。默认时，该类只能被同一个程序包中其他的类使用
Abstract  抽线类，没有具体对象的概念类，没有具体实现功能，只用于扩展子类。
final  最终类 表示该类已经非常具体，没有子类可以扩展

说明一个类的父类
在java中，除object类之外，每个类都有一个父类。Object类是java中唯一没有父类的类，如果某个类没有声明父类，java默认他是object的直接子类。因此，所有其他类都是object的直接或间接子类

说明一个类所实现的接口
接口定义了行为的协议，这些行为可以在处于各个层次的任何类中被实现。一个类要实现的一个或多个接口，可以实现关键字implements，并且在其后面给出由该类实现的接口的名字表，接口的名字表是以逗号分隔的多个接口，其形式为：
implements Interfaces1,Interfaces2,…,Interfacesk ;
接口可以声明多个方法和变量，但是没有这些方法的具体实现。

